'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const DEFAULT = {
    defaultNote: "Home",
    workspaceEnabled: false,
    hasRibbonIcon: true
};
const ICON = `<svg fill="currentColor" viewBox="0 0 18 18" xmlns="http://www.w3.org/2000/svg" xml:space="preserve" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2"><path d="M12.484 3.1 9.106.075.276 7.769h2.112v10.253h4.189v.006h4.827v-.006h3.954V7.769h2.339l-2.339-2.095v-4.48l-2.874.04V3.1zM7.577 17.028h2.9v-3.439h-2.9v3.439zm6.781-9.259h-3.671v3.24H7.313v-3.24H3.388v9.253h3.189v-4.433h4.9v4.433h2.881V7.769zm-4.671.222v2.018H8.313V7.991h1.374zM2.946 6.769h12.136l-2.598-2.326-3.387-3.034-6.151 5.36zm11.412-1.99-.874-.783V2.22l.874-.012v2.571z"/></svg>`;
class Homepage extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this.openHomepage = () => __awaiter(this, void 0, void 0, function* () {
            var _a;
            if (this.workspacesMode()) {
                if (!(this.settings.defaultNote in ((_a = this.workspacePlugin) === null || _a === void 0 ? void 0 : _a.instance.workspaces))) {
                    new obsidian.Notice(`Cannot find the workspace "${this.settings.defaultNote}" to use as the homepage.`);
                    return;
                }
                this.workspacePlugin.instance.loadWorkspace(this.settings.defaultNote);
            }
            else {
                yield this.app.workspace.openLinkText(this.settings.defaultNote, "", false, { active: true });
            }
        });
    }
    onload() {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            this.workspacePlugin = (_c = (_b = (_a = this.app) === null || _a === void 0 ? void 0 : _a.internalPlugins) === null || _b === void 0 ? void 0 : _b.plugins) === null || _c === void 0 ? void 0 : _c.workspaces;
            yield this.loadSettings();
            this.addSettingTab(new HomepageSettingTab(this.app, this));
            this.addCommand({
                id: "open-homepage",
                name: "Open homepage",
                callback: this.openHomepage,
            });
            if (this.settings.hasRibbonIcon) {
                obsidian.addIcon("homepage", ICON);
                this.addRibbonIcon("homepage", "Open homepage", this.openHomepage);
            }
            if (this.app.workspace.activeLeaf == null) {
                //only do on startup, not plugin activation
                this.app.workspace.onLayoutReady(this.openHomepage);
            }
            console.log(`Default note: ${this.settings.defaultNote}`);
        });
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
    workspacesMode() {
        var _a;
        return ((_a = this.workspacePlugin) === null || _a === void 0 ? void 0 : _a.enabled) && this.settings.workspaceEnabled;
    }
}
class HomepageSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
        this.settings = plugin.settings;
    }
    display() {
        var _a;
        let { containerEl } = this;
        containerEl.empty();
        new obsidian.Setting(containerEl)
            .setName("Open on startup")
            .setDesc(this.plugin.workspacesMode() ?
            "The name of the workspace to open on startup." :
            "The name of the note to open on startup. If it doesn't exist, a new note will be created.")
            .addText(text => text
            .setPlaceholder("Home")
            .setValue(DEFAULT.defaultNote == this.settings.defaultNote ? "" : this.settings.defaultNote)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.settings.defaultNote = value.replace(/\\+/g, "/") || DEFAULT.defaultNote;
            yield this.plugin.saveSettings();
        })));
        if ((_a = this.plugin.workspacePlugin) === null || _a === void 0 ? void 0 : _a.enabled) {
            new obsidian.Setting(containerEl)
                .setName("Use workspaces")
                .setDesc("Open a workspace, instead of a note, as the homepage.")
                .addToggle(toggle => toggle
                .setValue(this.settings.workspaceEnabled)
                .onChange((value) => __awaiter(this, void 0, void 0, function* () {
                this.settings.workspaceEnabled = value;
                yield this.plugin.saveSettings();
                this.display(); //update open on startup's text
            })));
        }
        let ribbonSetting = new obsidian.Setting(containerEl)
            .setName("Display ribbon icon")
            .setDesc("Show a little house on the ribbon, allowing you to quickly access the homepage.")
            .addToggle(toggle => toggle
            .setValue(this.settings.hasRibbonIcon)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.settings.hasRibbonIcon = value;
            yield this.plugin.saveSettings();
        })));
        ribbonSetting.descEl.createDiv({ text: "Takes effect on startup.", attr: { class: "mod-warning" } });
    }
}

module.exports = Homepage;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
