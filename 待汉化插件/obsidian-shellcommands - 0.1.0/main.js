/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');
var child_process = require('child_process');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function getVaultAbsolutePath(app) {
    // Original code was copied 2021-08-22 from https://github.com/phibr0/obsidian-open-with/blob/84f0e25ba8e8355ff83b22f4050adde4cc6763ea/main.ts#L66-L67
    // But the code has been rewritten 2021-08-27 as per https://github.com/obsidianmd/obsidian-releases/pull/433#issuecomment-906087095
    let adapter = app.vault.adapter;
    if (adapter instanceof obsidian.FileSystemAdapter) {
        return adapter.getBasePath();
    }
    return null;
}
function isWindows() {
    return process.platform === "win32";
}
function getEditor(app) {
    let view = app.workspace.getActiveViewOfType(obsidian.MarkdownView);
    if (!view) {
        console.log("getEditor(): Could not get a view. Will return null.");
        return null;
    }
    let view_mode = view.getMode(); // "preview" or "source" (can also be "live" but I don't know when that happens)
    switch (view_mode) {
        case "preview":
            // The leaf is in preview mode, which makes things difficult.
            // We could still return view.editor, but it does not work at least for getting selected text, maybe for other things, but currently this function is only used for getting selected text.
            // At this moment, just return null to indicate that we were not able to offer an editor instance which could work reliably on text selections.
            // FIXME: Find a way to work in preview mode, too!
            console.log("getEditor(): 'view' is in preview mode, and the poor guy who wrote this code, does not know how to return an editor instance that could be used for getting text selection.");
            return null;
        case "source":
            // Ensure that view.editor exists! It exists at least if this is a MarkDownView.
            if ("editor" in view) {
                // Good, it exists.
                // @ts-ignore We already know that view.editor exists.
                return view.editor;
            }
            console.log("getEditor(): 'view' does not have a property named 'editor'. Will return null.");
            return null;
    }
}

let shell_command_variable_instructions = [];
function parseShellCommandVariables(app, command, enable_notifications) {
    let shell_variables = [
        new ShellCommandVariable_Clipboard(app, enable_notifications),
        new ShellCommandVariable_Date(app, enable_notifications),
        new ShellCommandVariable_FileName(app, enable_notifications),
        new ShellCommandVariable_FilePath(app, enable_notifications),
        new ShellCommandVariable_FolderName(app, enable_notifications),
        new ShellCommandVariable_FolderPath(app, enable_notifications),
        new ShellCommandVariable_Selection(app, enable_notifications),
        new ShellCommandVariable_Title(app, enable_notifications),
        new ShellCommandVariable_VaultPath(app, enable_notifications),
    ];
    let parsed_command = command; // Create a copy of the variable because we don't want to alter the original value of 'command' during iterating its regex matches.
    let parsing_failed = false;
    shell_variables.forEach((variable) => {
        let pattern = new RegExp(variable.getPattern(), "ig"); // i: case-insensitive; g: match all occurrences instead of just the first one.
        let match;
        while ((match = pattern.exec(command)) !== null) {
            let substitute = match[0];
            let argument = null;
            if (variable.has_argument && undefined !== match[1]) {
                // Extract an argument from the match.
                argument = match[1];
            }
            let variable_value = variable.getValue(argument);
            if (null === variable_value) {
                // The variable value getter has indicated that there has been a problem (probably in the passed argument) and executing the command should be cancelled. No need to continue iterating other variables.
                parsing_failed = true;
                // TODO: Find out how to break from forEach() so that we don't need to unnecessarily iterate the rest of the variables.
            }
            else {
                parsed_command = parsed_command.replace(substitute, variable_value);
            }
        }
    });
    if (parsing_failed) {
        return null;
    }
    return parsed_command;
}
function getShellCommandVariableInstructions() {
    return shell_command_variable_instructions;
}
class ShellCommandVariable {
    constructor(app, enable_notifications) {
        this.has_argument = false;
        this.app = app;
        this.enable_notifications = enable_notifications;
    }
    getPattern() {
        let pattern = '\{\{' + this.name;
        if (this.has_argument) {
            pattern += ':(.+?)';
        }
        pattern += '\}\}';
        return pattern;
    }
    notify(message) {
        // Notifications can be disabled. This is done when previewing commands while they are being typed.
        if (this.enable_notifications) {
            let prefix = "{{" + this.name + "}}: ";
            new obsidian.Notice(prefix + message);
        }
    }
}
// DEFINE VARIABLE CLASSES BELOW
// (Keep them in alphabetical order so that the instructions will be displayed in a nice order.)
class ShellCommandVariable_Clipboard extends ShellCommandVariable {
    constructor() {
        super(...arguments);
        this.name = "clipboard";
    }
    getValue() {
        let clipboard = require("electron").clipboard;
        return clipboard.readText();
    }
}
shell_command_variable_instructions.push({
    variable_name: "{{clipboard}}",
    instructions: "Gives the content you last copied to your clipboard.",
});
class ShellCommandVariable_Date extends ShellCommandVariable {
    constructor() {
        super(...arguments);
        this.name = "date";
        this.has_argument = true;
    }
    getValue(format) {
        return obsidian.moment().format(format);
    }
}
shell_command_variable_instructions.push({
    variable_name: "{{date:format}}",
    instructions: "Gives a date/time stamp as per your liking. The \"format\" part can be customized and is mandatory. Formatting options: https://momentjs.com/docs/#/displaying/format/",
});
class ShellCommandVariable_FileName extends ShellCommandVariable {
    constructor() {
        super(...arguments);
        this.name = "file_name";
    }
    getValue() {
        let file = this.app.workspace.getActiveFile();
        if (!file) {
            this.notify("No file is active at the moment. Open a file or click a pane that has a file open.");
            return null; // null indicates that getting a value has failed and the command should not be executed.
        }
        return file.name;
    }
}
shell_command_variable_instructions.push({
    variable_name: "{{file_name}}",
    instructions: "Gives the current file name with a file extension.",
});
class ShellCommandVariable_FilePath extends ShellCommandVariable {
    constructor() {
        super(...arguments);
        this.name = "file_path";
        this.has_argument = true;
    }
    getValue(mode) {
        let active_file = this.app.workspace.getActiveFile();
        if (active_file) {
            switch (mode) {
                case "absolute":
                    return obsidian.normalizePath(getVaultAbsolutePath(this.app) + "/" + active_file.path);
                case "relative":
                    return active_file.path;
                default:
                    this.notify(`Unknown mode "${mode}"! Use "absolute" or "relative".`);
                    return null; // null indicates that getting a value has failed and the command should not be executed.
            }
        }
        else {
            this.notify("No file is active at the moment. Open a file or click a pane that has a file open.");
            return null; // null indicates that getting a value has failed and the command should not be executed.
        }
    }
}
shell_command_variable_instructions.push({
    variable_name: "{{file_path:relative}} or {{file_path:absolute}}",
    instructions: "Gives path to the current file, either as absolute from the root of the file system, or as relative from the root of the Obsidian vault.",
});
class ShellCommandVariable_FolderName extends ShellCommandVariable {
    constructor() {
        super(...arguments);
        this.name = "folder_name";
    }
    getValue() {
        let file = this.app.workspace.getActiveFile();
        if (!file) {
            this.notify("No file is active at the moment. Open a file or click a pane that has a file open.");
            return null; // null indicates that getting a value has failed and the command should not be executed.
        }
        if (!file.parent) {
            this.notify("The current file does not have a parent for some strange reason.");
            return null; // null indicates that getting a value has failed and the command should not be executed.
        }
        return file.parent.name;
    }
}
shell_command_variable_instructions.push({
    variable_name: "{{folder_name}}",
    instructions: "Gives the current file's parent folder name. No ancestor folders are included.",
});
class ShellCommandVariable_FolderPath extends ShellCommandVariable {
    constructor() {
        super(...arguments);
        this.name = "folder_path";
        this.has_argument = true;
    }
    getValue(mode) {
        let active_file = this.app.workspace.getActiveFile();
        if (active_file) {
            if (active_file.parent) {
                let folder = active_file.parent;
                switch (mode) {
                    case "absolute":
                        return obsidian.normalizePath(getVaultAbsolutePath(this.app) + "/" + folder.path);
                    case "relative":
                        return folder.path;
                    default:
                        this.notify(`Unknown mode "${mode}"! Use "absolute" or "relative".`);
                        return null; // null indicates that getting a value has failed and the command should not be executed.
                }
            }
            else {
                this.notify("The current file does not have a parent for some strange reason.");
                return null; // null indicates that getting a value has failed and the command should not be executed.
            }
        }
        else {
            this.notify("No file is active at the moment. Open a file or click a pane that has a file open.");
            return null; // null indicates that getting a value has failed and the command should not be executed.
        }
    }
}
shell_command_variable_instructions.push({
    variable_name: "{{folder_path:relative}} or {{folder_path:absolute}}",
    instructions: "Gives path to the current file's parent folder, either as absolute from the root of the file system, or as relative from the root of the Obsidian vault.",
});
class ShellCommandVariable_Selection extends ShellCommandVariable {
    constructor() {
        super(...arguments);
        this.name = "selection";
    }
    getValue() {
        let editor = getEditor(this.app);
        if (null === editor) {
            // Probably the leaf is in preview mode or some other problem happened.
            // FIXME: Make it possible to use this feature also in preview mode.
            this.notify("You need to turn editing mode on, as I'm not able to get selected text when in preview mode. Blame the one who developed this plugin! This should be fixed in the future.");
            return null;
        }
        if (editor.somethingSelected()) {
            return editor.getSelection();
        }
        return "";
    }
}
shell_command_variable_instructions.push({
    variable_name: "{{selection}}",
    instructions: "Gives the currently selected text. Atm only works in editing mode, not in preview mode!",
});
class ShellCommandVariable_Title extends ShellCommandVariable {
    constructor() {
        super(...arguments);
        this.name = "title";
    }
    getValue() {
        let active_file = this.app.workspace.getActiveFile();
        if (active_file) {
            return active_file.basename;
        }
        this.notify("No file is active at the moment. Open a file or click a pane that has a file open.");
        return null;
    }
}
shell_command_variable_instructions.push({
    variable_name: "{{title}}",
    instructions: "Gives the current file name without a file extension.",
});
class ShellCommandVariable_VaultPath extends ShellCommandVariable {
    constructor() {
        super(...arguments);
        this.name = "vault_path";
    }
    getValue() {
        return getVaultAbsolutePath(this.app);
    }
}
shell_command_variable_instructions.push({
    variable_name: "{{vault_path}}",
    instructions: "Gives the Obsidian vault's absolute path from the root of the filesystem. This is the same that is used as a default working directory if you do not define one manually. If you define a working directory manually, this variable won't give you your manually defined directory, it always gives the vault's root directory.",
});

const DEFAULT_SETTINGS = {
    working_directory: "",
    commands: []
};
class ShellCommandsPlugin extends obsidian.Plugin {
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('loading plugin');
            yield this.loadSettings();
            // Make all defined shell commands to appear in the Obsidian command list
            for (let command_id in this.settings.commands) {
                let command = this.settings.commands[command_id];
                this.registerShellCommand(parseInt(command_id), command);
            }
            this.addSettingTab(new ShellCommandsSettingsTab(this.app, this));
        });
    }
    registerShellCommand(command_id, command) {
        this.addCommand({
            id: "shell-command-" + command_id,
            name: "Execute: " + command,
            callback: () => {
                this.executeShellCommand(command);
            }
        });
    }
    executeShellCommand(command) {
        let parsed_command = parseShellCommandVariables(this.app, command, true);
        if (null === parsed_command) {
            // The command could not be parsed correctly.
            console.log("Parsing command " + command + " failed.");
            // No need to create a notice here, because the parsing process creates notices every time something goes wrong.
        }
        else {
            // The command was parsed correctly.
            console.log("Executing command " + parsed_command + " in " + this.getWorkingDirectory() + "...");
            child_process.exec(parsed_command, {
                "cwd": this.getWorkingDirectory()
            }, (error) => {
                if (null !== error) {
                    // Some error occurred
                    console.log("Command executed and failed. Error number: " + error.code + ". Message: " + error.message);
                    new obsidian.Notice("[" + error.code + "]: " + error.message);
                }
                else {
                    // No errors
                    console.log("Command executed without errors.");
                }
            });
        }
    }
    getWorkingDirectory() {
        // Returns either a user defined working directory, or an automatically detected one.
        let working_directory = this.settings.working_directory;
        if (working_directory.length == 0) {
            return getVaultAbsolutePath(this.app);
        }
        return working_directory;
    }
    onunload() {
        console.log('unloading plugin');
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
}
class ShellCommandsSettingsTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
        this.commands = this.plugin.settings.commands;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        containerEl.createEl('h2', { text: "Shell commands" });
        // "Working directory" field
        new obsidian.Setting(containerEl)
            .setName("Working directory")
            .setDesc("Enter a directory where your commands will be run. If empty, defaults to your vault's location.")
            .addText(text => text
            .setPlaceholder(getVaultAbsolutePath(this.app))
            .setValue(this.plugin.settings.working_directory)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            console.log("Changing working_directory to " + value);
            this.plugin.settings.working_directory = value;
            yield this.plugin.saveSettings();
        })));
        // Tips when the user has already defined some commands
        if (this.commands.length > 0) {
            containerEl.createEl('p', { text: "To remove a command, clear its text field. Note that if you remove commands, other shell commands can switch place and hotkeys might change! Always check your shell commands' hotkey configurations after removing or making changes to shell commands!" });
            if (isWindows())
                containerEl.createEl('p', { text: "Tip for Windows: If you get an error starting with \"[259]: Command failed:\" even though the execution works ok, you can try to prefix your command with \"start \". E.g. \"start git-gui\"." });
        }
        // A <div> element for all command input fields. New command fields can be created at the bottom of this element.
        let command_fields_container = containerEl.createEl("div");
        // Fields for modifying existing commands
        for (let command_id in this.commands) {
            this.createCommandField(command_fields_container, parseInt(command_id));
        }
        // "Apply changes" button
        new obsidian.Setting(containerEl)
            .setDesc("Click this when you make changes to commands. Other settings are applied automatically.")
            .addButton(button => button
            .setButtonText("APPLY CHANGES")
            .onClick(() => __awaiter(this, void 0, void 0, function* () {
            console.log("Updating shell command settings...");
            for (let command_id in this.commands) {
                let command = this.commands[command_id];
                if (command.length > 0) {
                    // Define/change a command
                    console.log("Command " + command_id + " gonna change to: " + command);
                    this.plugin.settings.commands[command_id] = command;
                    this.plugin.registerShellCommand(parseInt(command_id), command);
                    // TODO: How to remove the old command from Obsidian commands list?
                    console.log("Command changed.");
                }
                else {
                    // Remove a command
                    console.log("Command " + command_id + " gonna be removed.");
                    this.plugin.settings.commands.splice(parseInt(command_id), 1); // Why .remove() does not work? :( :( :(
                    // TODO: How to remove a command from Obsidian commands list?
                    console.log("Command removed.");
                }
            }
            yield this.plugin.saveSettings();
            console.log("Shell command settings updated.");
            new obsidian.Notice("Applied!");
        })));
        // "New command" button
        new obsidian.Setting(containerEl)
            .addButton(button => button
            .setButtonText("New command")
            .onClick(() => __awaiter(this, void 0, void 0, function* () {
            this.commands.push(""); // The command is just an empty string at this point.
            this.createCommandField(command_fields_container, this.commands.length - 1);
            console.log("New empty command created.");
            new obsidian.Notice("Remember to click APPLY CHANGES after you have written the new command!");
        })));
        // Variable instructions
        containerEl.createEl("h2", { text: "Variables" });
        getShellCommandVariableInstructions().forEach((instructions) => {
            let paragraph = containerEl.createEl("p");
            // @ts-ignore
            paragraph.createEl("strong", { text: instructions.variable_name + " " });
            // @ts-ignore
            paragraph.createEl("span", { text: instructions.instructions });
        });
        containerEl.createEl("p", { text: "When you type variables into commands, a preview text appears under the command field to show how the command will look like when it gets executed with variables substituted with their real values." });
        containerEl.createEl("p", { text: "There is no way to escape variable parsing. If you need {{ }} characters in your command, they won't be parsed as variables as long as they do not contain any of the variable names listed below. If you would need to pass e.g. {{title}} literally to your command, there is no way to do it atm, please raise an issue in GitHub." });
        containerEl.createEl("p", { text: "All variables that access the current file, may cause the command preview to fail if you had no file panel active when you opened the settings window - e.g. you had focus on graph view instead of a note = no file is currently active. But this does not break anything else than the preview." });
    }
    createCommandField(container_element, command_id) {
        let command = this.commands[command_id];
        let setting = new obsidian.Setting(container_element)
            .setName("Command #" + command_id)
            .setDesc(this.getCommandPreview(command))
            .addText(text => text
            .setPlaceholder("Enter your command")
            .setValue(command)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.commands[command_id] = value;
            setting.setDesc(this.getCommandPreview(value));
        })));
    }
    getCommandPreview(command) {
        let parsed_command = parseShellCommandVariables(this.app, command, false); // false: disables notifications if variables have syntax errors.
        if (null === parsed_command) {
            return "[Error while parsing variables.]";
        }
        return parsed_command;
    }
}

module.exports = ShellCommandsPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
