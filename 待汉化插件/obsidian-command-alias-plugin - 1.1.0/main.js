/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

class CommandAliasPluginSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        let app = this.app;
        let options = { "": "--- command list ---" };
        for (const key in app.commands.commands) {
            if (!Object.prototype.hasOwnProperty.call(app.commands.commands, key)) {
                continue;
            }
            if (key.startsWith('obsidian-command-alias-plugin:')) {
                continue;
            }
            const command = app.commands.commands[key];
            options[key] = command.name;
        }
        containerEl.empty();
        containerEl.createEl('h2', { text: 'Command alias' });
        let selectedCommandId = "";
        new obsidian.Setting(containerEl)
            .setName('Select command')
            .setDesc('*Obsolate*: Added useful commands. "Command Alias: Add command alias" does not require a manual reload of the plugin.')
            .addDropdown(dropdown => dropdown
            .addOptions(options)
            .onChange(value => {
            console.log("select command");
            selectedCommandId = value;
        }));
        let aliasName = "";
        new obsidian.Setting(containerEl)
            .setName('Add alias')
            .setDesc('Reload is required to apply.')
            .addText(text => text
            .setPlaceholder('alias name')
            .onChange(value => {
            aliasName = value.trim();
        }))
            .addButton(button => button
            .setButtonText('Add')
            .onClick((e) => __awaiter(this, void 0, void 0, function* () {
            if (selectedCommandId == "" || aliasName == "") {
                return;
            }
            this.plugin.addAliasSetting(aliasName, selectedCommandId);
            yield this.plugin.saveSettings();
            this.display();
        })));
        // remove alias
        containerEl.createEl('h3', { text: 'Register aliases' });
        for (const aliasId in this.plugin.settings.aliases) {
            if (!Object.prototype.hasOwnProperty.call(this.plugin.settings.aliases, aliasId)) {
                continue;
            }
            const alias = this.plugin.settings.aliases[aliasId];
            const command = app.commands.commands[alias.commandId];
            const commandName = command.name || 'command missing';
            new obsidian.Setting(containerEl)
                .setName(alias.name)
                .setDesc(commandName)
                .addButton(button => button
                .setButtonText('Remove')
                .onClick((e) => __awaiter(this, void 0, void 0, function* () {
                delete this.plugin.settings.aliases[aliasId];
                yield this.plugin.saveSettings();
                this.display();
            })));
        }
    }
}

class CommandSuggestionModal extends obsidian.FuzzySuggestModal {
    constructor(app, plugin) {
        super(app);
        this.plugin = plugin;
        let appex = app;
        let items = [];
        for (let id in appex.commands.commands) {
            // Don't loop aliases.
            if (id.startsWith('obsidian-command-alias-plugin:alias:')) {
                continue;
            }
            items.push({
                id: id,
                name: appex.commands.commands[id].name,
            });
        }
        this.items = items;
    }
    getItems() {
        return this.items;
    }
    getItemText(item) {
        return item.name;
    }
    onChooseItem(item, evt) {
        let m = new NamingModal({
            app: this.app,
            plugin: this.plugin,
            command: item,
        });
        m.open();
    }
}
class NamingModal extends obsidian.Modal {
    constructor(params) {
        let { app, plugin, command } = params;
        super(app);
        this.plugin = plugin;
        this.command = command;
    }
    onOpen() {
        let { contentEl } = this;
        contentEl.createEl('h2', { text: `Add alias: ${this.command.name}` });
        let aliasName = "";
        new obsidian.Setting(contentEl)
            .setName('Naming alias')
            .addText(text => text
            .setPlaceholder('add alias')
            .onChange(value => {
            aliasName = value.trim();
        }))
            .addButton(button => button
            .setButtonText('Add')
            .onClick((e) => __awaiter(this, void 0, void 0, function* () {
            if (aliasName === "") {
                new obsidian.Notice('alias name is empty');
                return;
            }
            this.plugin.addAliasSetting(aliasName, this.command.id);
            yield this.plugin.saveSettings();
            this.close();
            this.plugin.unload();
            this.plugin.load();
        })));
        contentEl.find('input').focus();
    }
    onClose() {
        let { contentEl } = this;
        contentEl.empty();
    }
}

const DEFAULT_SETTINGS = {
    aliases: {}
};
class CommandAliasPlugin extends obsidian.Plugin {
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('loading plugin');
            this.app;
            yield this.loadSettings();
            this.addCommand({
                id: "add-alias",
                name: "Add command alias",
                callback: () => {
                    let modal = new CommandSuggestionModal(this.app, this);
                    modal.open();
                },
            });
            for (const aliasId in this.settings.aliases) {
                if (!Object.prototype.hasOwnProperty.call(this.settings.aliases, aliasId)) {
                    continue;
                }
                this.addAliasCommand(aliasId);
            }
            this.addSettingTab(new CommandAliasPluginSettingTab(this.app, this));
        });
    }
    addAliasCommand(aliasId) {
        let app = this.app;
        const alias = this.settings.aliases[aliasId];
        const target = app.commands.commands[alias.commandId];
        if (target) {
            let command = {
                id: `alias:${aliasId}`,
                name: `${alias.name}: ${target.name}`,
            };
            if (target.callback) {
                command.callback = () => {
                    const target = app.commands.commands[alias.commandId];
                    if (target) {
                        target.callback();
                    }
                    else {
                        new obsidian.Notice("Missing command. The command may be invalid.");
                    }
                };
            }
            if (target.checkCallback) {
                command.checkCallback = (checking) => {
                    const target = app.commands.commands[alias.commandId];
                    if (target) {
                        return target.checkCallback(checking);
                    }
                    if (checking) {
                        // Don't hide the probrem.
                        return true;
                    }
                    else {
                        new obsidian.Notice("Missing command. The command may be invalid.");
                    }
                };
            }
            this.addCommand(command);
        }
        else {
            // fallback
            let command = {
                id: `alias:${aliasId}`,
                name: `${alias.name}: Missing command. Run this and try rebinding.`,
                callback: () => {
                    this.unload();
                    this.load();
                }
            };
            this.addCommand(command);
        }
    }
    onunload() {
        console.log('unloading plugin');
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
    addAliasSetting(aliasName, commandId) {
        let aliasId = Date.now().toString();
        console.log('Add id:', aliasId, 'alias:', aliasName, "command:", commandId);
        this.settings.aliases[aliasId] = {
            name: aliasName,
            commandId: commandId,
        };
    }
}

module.exports = CommandAliasPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
