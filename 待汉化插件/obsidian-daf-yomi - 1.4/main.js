/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

const DEFAULT_SETTINGS = {
    dyDir: "/Home/Judiasm/Daf Yomi",
    sefaria: false,
    stpdflink: true,
    stpdf: false,
    stc: true,
    myjl: true,
    dydg: false,
    hd: false // Link to Hadran?
};
class DafYomi extends obsidian.Plugin {
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loadSettings();
            // The command to add a Daf Yomi page by date
            this.addCommand({
                id: 'dy-add-page-by-date',
                name: 'Add Daf Yomi page by date',
                callback: () => {
                    new DYModalByDate(this.app, this).open();
                }
            });
            // The command to add a Daf Yomi page by daf
            this.addCommand({
                id: 'dy-add-page-by-daf',
                name: 'Add Daf Yomi page by tractate/daf',
                callback: () => {
                    new DYModalByDaf(this.app, this).open();
                }
            });
            // The settings tab
            this.addSettingTab(new DYSettingTab(this.app, this));
            // Make the tractates table
            this.tractates = {
                "2022-02-11": { disp: "Chagigah", stpdf: "Chagigah/Chagigah_", stc: "hagiga", myjl: 'hagiga-', sf: 'Chagigah.', dydg: 'Chagiga%20', hd: 'UNKNOWN-' },
                "2022-01-24": { disp: "Moed Katan", stpdf: "MoedKatan/MoedKatan_", stc: 'moed', myjl: 'moed-', sf: 'Moed_Katan.', dydg: 'MoedKatan%20', hd: 'UNKNOWN-' },
                "2021-12-14": { disp: "Megilah", stpdf: "Megilah/Megilah_", stc: 'megila', myjl: 'megila-', sf: 'Megillah.', dydg: 'Megilla%20', hd: 'UNKNOWN-' },
                "2021-11-14": { disp: "Ta'anis", stpdf: "Tannis/Tannis_", stc: 'taanit', myjl: 'taanit-', sf: 'Taanit.', dydg: 'Taanis%20', hd: 'UNKNOWN-' },
                "2021-10-11": { disp: "Rosh Hashanah", stpdf: "RoshHashanah/RoshHashanah_", stc: 'roshhashana', myjl: 'roshhashana-', sf: 'Rosh_Hashanah.', dydg: 'RoshHaShana%20', hd: 'UNKNOWN-' },
                "2021-09-02": { disp: "Beitzah", stpdf: "Beitza_RH/Beitza_", stc: 'beitza', myjl: "beitzah-", sf: "Beitzah.", dydg: 'Beitza%20', hd: 'beitzah-' },
                "2021-07-09": { disp: "Sukkah", stpdf: "Sukka/Sukkah_", stc: 'sukka', myjl: 'sukkah-', sf: 'Sukkah.', dydg: 'Sukkah%20', hd: 'sukkah-' },
            };
        });
    }
    // Add a Daf Yomi page by date
    addPageByDate(dateS) {
        return __awaiter(this, void 0, void 0, function* () {
            let dafDate = this.makeDate(dateS);
            let daf = this.findDafByDate(dafDate);
            if (!daf) {
                new obsidian.Notice("Date does not match a Daf", 5000);
                return;
            }
            this.addPage(daf);
        });
    }
    // Add the page
    addPage(daf) {
        return __awaiter(this, void 0, void 0, function* () {
            // Make the URLs
            const urls = {
                steinsaltz_pdf: `https://www.steinsaltz-center.org/vault/DafYomi/${daf.tractate.stpdf}${daf.page}.pdf`,
                steinsaltz_c: `https://steinsaltz.org/daf/${daf.tractate.stc}${daf.page}`,
                myjl: `https://www.myjewishlearning.com/article/${daf.tractate.myjl}${daf.page}`,
                sf: `https://www.sefaria.org/${daf.tractate.sf}${daf.page}`,
                dydg: `https://www.dafdigest.org/masechtos/${daf.tractate.dydg}${daf.page.toString().padStart(3, "0")}.pdf`,
                hd: `https://hadran.org.il/daf/${daf.tractate.hd}${daf.page}`
            };
            // Determine directory and page names
            const baseDir = this.settings.dyDir;
            const directoryName = `${baseDir}/${daf.tractate.disp}`;
            const pageName = `Daf Yomi ${daf.tractate.disp} ${daf.page}`;
            const pageFile = `${directoryName}/${pageName}.md`;
            // Don't overwrite an old file
            if (yield this.app.vault.adapter.exists(pageFile)) {
                new obsidian.Notice(`Note ${pageName} already exists`, 5000);
                return;
            }
            // Make directory if necessary
            if (!(yield this.app.vault.adapter.exists(directoryName))) {
                yield this.app.vault.adapter.mkdir(directoryName);
                new obsidian.Notice(`Created directory ${directoryName}`);
            }
            // Create the page
            let t = `# ${pageName}\n\n`; // H1 title
            // Do we want to download the Steinsaltz PDF page?
            if (this.settings.stpdf) {
                let url = urls.steinsaltz_pdf;
                let r = new Request(url);
                fetch(r).then((r) => { return r.blob(); }).then((b) => { this.writeSteinsaltzPDF(b, directoryName, daf.tractate.disp, daf.page); });
                t += `![[${daf.tractate.disp}_${daf.page}.pdf]]\n`;
            }
            // Do we want a link to the Steinsaltz PDF (not downloaded)?
            if (this.settings.stpdflink)
                t += `[Steinsaltz PDF](${urls.steinsaltz_pdf})\n`;
            // Do we want the Sefaria link?
            if (this.settings.sefaria)
                t += `[Sefaria](${urls.sf})\n`;
            // Do we want the Steinsaltz commentary?
            if (this.settings.stc)
                t += `[Steinsaltz Commentary](${urls.steinsaltz_c})\n`;
            // Do we want the My Jewish Learning commentary?
            if (this.settings.myjl)
                t += `[My Jewish Learning Commentary](${urls.myjl})\n`;
            // Do we want Daf Yomi Digest?
            if (this.settings.dydg)
                t += `[Daf Yomi Digest](${urls.dydg})\n`;
            // Do we want Hadran?
            if (this.settings.hd)
                t += `[Hadran Commentary](${urls.hd})\n`;
            t += '\n## Notes\n\n';
            // Write the page
            yield this.app.vault.create(pageFile, t);
            new obsidian.Notice(`Created note ${pageName}`);
            // Add to the Tractate page
            const tractatePage = `Tractate ${daf.tractate.disp}`;
            const tractateFile = `${directoryName}/${tractatePage}.md`;
            const toAdd = `[[${pageName}|${daf.page}]]`;
            if (!(yield this.app.vault.adapter.exists(tractateFile))) {
                const t = `# ${tractatePage}\n\n${toAdd}`;
                yield this.app.vault.create(tractateFile, t);
                new obsidian.Notice(`Created note ${tractatePage}`);
            }
            else {
                let current = yield this.app.vault.adapter.read(tractateFile);
                yield this.app.vault.adapter.write(tractateFile, current + " " + toAdd);
                new obsidian.Notice(`Added to note ${tractatePage}`);
            }
        });
    }
    onunload() {
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
    // Utility functions
    // note the format:  fcn_name(param: type): return_type {}
    // Take a string and turn it into a Moment date with UTC (to avoid time changes)
    makeDate(dateS) {
        return window.moment(`${dateS}T00:00:00.000Z`);
    }
    // Find the daf for this date
    findDafByDate(dafDate) {
        let startDate = undefined;
        let tractate = undefined;
        for (const k in this.tractates) {
            startDate = this.makeDate(k);
            if (dafDate >= startDate) {
                tractate = this.tractates[k];
                break;
            }
        }
        // No tractate?
        if (!tractate) {
            return undefined;
        }
        // Determine the page number
        let page = dafDate.diff(startDate, 'days') + 2;
        return { tractate: tractate, page: page };
    }
    // Find daf by name
    findDafByName(inTractate, inPage) {
        let tractate = undefined;
        for (const k in this.tractates) {
            if (inTractate == this.tractates[k].disp) {
                tractate = this.tractates[k];
                break;
            }
        }
        if (!tractate) {
            return undefined;
        }
        return { tractate: tractate, page: inPage };
    }
    // Write the PDF file we downloaded
    writeSteinsaltzPDF(body, directoryName, tractate, page) {
        return __awaiter(this, void 0, void 0, function* () {
            let attachDir = this.app.vault.getConfig("attachmentFolderPath"); // Get attachment directory from Obsidian
            let pdfDir = directoryName;
            if (attachDir == "/") { // Top of the vault
                pdfDir = ""; // Will get leading / from pathName (see below)
            }
            else if (attachDir == "./") { // Current directory
                pdfDir = directoryName;
            }
            else if (attachDir.substring(0, 2) == "./" && attachDir.length > 2) { // Subdirectory of current
                pdfDir = directoryName + "/" + attachDir.substring(2);
                // Make directory?
                if (!(yield this.app.vault.adapter.exists(pdfDir))) {
                    yield this.app.vault.adapter.mkdir(pdfDir);
                    new obsidian.Notice(`Created attachments directory ${pdfDir}`);
                }
            }
            else if (attachDir.substring(0, 1) != "/") { // Absolute name
                pdfDir = "/" + attachDir;
            }
            let pathName = `${pdfDir}/${tractate}_${page}.pdf`;
            this.app.vault.createBinary(pathName, yield body.arrayBuffer());
        });
    }
}
// The Modal to ask for the date
class DYModalByDate extends obsidian.Modal {
    constructor(app, plugin) {
        super(app);
        this.plugin = plugin;
    }
    onOpen() {
        const { contentEl } = this;
        const dateField = new obsidian.TextComponent(contentEl).setValue(window.moment().format("YYYY-MM-DD"));
        dateField.inputEl.id = "dy-date-input";
        const doAddPage = () => {
            const dateS = dateField.getValue();
            this.plugin.addPageByDate(dateS);
            this.close();
        };
        const addPageButton = new obsidian.ButtonComponent(contentEl)
            .setButtonText("Add page")
            .onClick(doAddPage);
        addPageButton.buttonEl.id = 'dy-add-page-button';
        dateField.inputEl.focus();
        dateField.inputEl.addEventListener("keypress", function (keypressed) {
            if (keypressed.key === "Enter") {
                doAddPage();
            }
        });
    }
    onClose() {
        let { contentEl } = this;
        contentEl.empty();
    }
}
// The Modal to ask for the tractate/daf
class DYModalByDaf extends obsidian.Modal {
    constructor(app, plugin) {
        super(app);
        this.plugin = plugin;
    }
    onOpen() {
        const { contentEl } = this;
        // What is the daf for today?
        let today = window.moment();
        let daf = this.plugin.findDafByDate(today);
        const tractateField = new obsidian.TextComponent(contentEl).setValue(`${daf.tractate.disp}`);
        const pageField = new obsidian.TextComponent(contentEl).setValue(`${daf.page}`);
        tractateField.inputEl.id = "dy-tractate-input";
        pageField.inputEl.id = "dy-page-input";
        const doAddPage = () => {
            const inTractate = tractateField.getValue();
            const inPage = pageField.getValue();
            let theDaf = this.plugin.findDafByName(inTractate, parseInt(inPage));
            if (!theDaf) {
                new obsidian.Notice("Tractate is unknown", 5000);
                return;
            }
            this.plugin.addPage(theDaf);
            this.close();
        };
        const addPageButton = new obsidian.ButtonComponent(contentEl)
            .setButtonText("Add page")
            .onClick(doAddPage);
        addPageButton.buttonEl.id = 'dy-add-page-button';
        pageField.inputEl.focus();
        pageField.inputEl.addEventListener("keypress", function (keypressed) {
            if (keypressed.key === "Enter") {
                doAddPage();
            }
        });
    }
    onClose() {
        let { contentEl } = this;
        contentEl.empty();
    }
}
// The settings pane
class DYSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        containerEl.createEl('p', { text: 'Daf Yomi settings' });
        new obsidian.Setting(containerEl)
            .setName('Daf Yomi directory')
            .setDesc('Directory in your Vault for Daf Yomi notes')
            .addText(text => text
            .setPlaceholder('Daf Yomi directory')
            .setValue(this.plugin.settings.dyDir)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.dyDir = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName("Link to Steinsaltz PDF")
            .setDesc("Add link to Steinsaltz PDF")
            .addToggle(t => {
            t
                .setValue(this.plugin.settings.stpdflink)
                .onChange((v) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.stpdflink = v;
                this.display();
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName("Download Steinsaltz PDF")
            .setDesc("Add Steinsaltz PDF")
            .addToggle(t => {
            t
                .setValue(this.plugin.settings.stpdf)
                .onChange((v) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.stpdf = v;
                this.display();
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName("Link to Sefaria")
            .setDesc("Add link to Sefaria")
            .addToggle(t => {
            t
                .setValue(this.plugin.settings.sefaria)
                .onChange((v) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.sefaria = v;
                this.display();
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName("Link to Steinsaltz commentary")
            .setDesc("Add link to Steinsaltz commentary")
            .addToggle(t => {
            t
                .setValue(this.plugin.settings.stc)
                .onChange((v) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.stc = v;
                this.display();
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName("Link to My Jewish Learning commentary")
            .setDesc("Add link to My Jewish Learning commentary")
            .addToggle(t => {
            t
                .setValue(this.plugin.settings.myjl)
                .onChange((v) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.myjl = v;
                this.display();
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName("Link to Daf Yomi Digest")
            .setDesc("Add link to Daf Yomi Digest (Chicago Center for Torah & Chesed)")
            .addToggle(t => {
            t
                .setValue(this.plugin.settings.dydg)
                .onChange((v) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.dydg = v;
                this.display();
                yield this.plugin.saveSettings();
            }));
        });
        new obsidian.Setting(containerEl)
            .setName("Link to Hadran commentary")
            .setDesc("Add link to Hadran commentary")
            .addToggle(t => {
            t
                .setValue(this.plugin.settings.hd)
                .onChange((v) => __awaiter(this, void 0, void 0, function* () {
                this.plugin.settings.hd = v;
                this.display();
                yield this.plugin.saveSettings();
            }));
        });
    }
}

module.exports = DafYomi;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
